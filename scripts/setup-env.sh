#!/bin/bash

# AWE Environment Setup Script (Shell Version)
# Quick setup for environment variables without interactive prompts

set -e

echo "🔧 AWE Environment Setup (Quick Mode)"
echo

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to prompt for input with default value
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    if [ -n "$default" ]; then
        echo -n "$prompt [$default]: "
    else
        echo -n "$prompt: "
    fi
    
    read -r input
    if [ -z "$input" ] && [ -n "$default" ]; then
        input="$default"
    fi
    
    # Export the variable
    export "$var_name"="$input"
}

# Function to prompt for password
prompt_password() {
    local prompt="$1"
    local var_name="$2"
    
    echo -n "$prompt: "
    read -rs input
    echo
    export "$var_name"="$input"
}

# Check if .env.local exists
if [ -f ".env.local" ] || [ -f "apps/web/.env.local" ]; then
    echo -e "${YELLOW}Warning: .env.local files already exist.${NC}"
    echo -n "Overwrite them? (y/N): "
    read -r overwrite
    if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Setup cancelled. Existing files preserved.${NC}"
        exit 0
    fi
fi

echo -e "${CYAN}📋 Please provide the following information:${NC}"
echo

# Basic configuration
prompt_with_default "Environment (development/test/production)" "development" "ENVIRONMENT"
prompt_with_default "Application URL" "http://localhost:3000" "APP_URL"

echo
echo -e "${CYAN}🔗 Supabase Configuration${NC}"
echo -e "${YELLOW}Get these from: https://app.supabase.com/project/_/settings/api${NC}"
echo

echo -n "Configure Supabase? (Y/n): "
read -r use_supabase
if [[ ! "$use_supabase" =~ ^[Nn]$ ]]; then
    prompt_with_default "Supabase Project URL" "" "SUPABASE_URL"
    prompt_password "Supabase Anonymous Key" "SUPABASE_ANON_KEY"
    
    echo -n "Do you have a Service Role Key? (Y/n): "
    read -r has_service_key
    if [[ ! "$has_service_key" =~ ^[Nn]$ ]]; then
        prompt_password "Supabase Service Role Key" "SUPABASE_SERVICE_KEY"
    fi
else
    export SUPABASE_URL=""
    export SUPABASE_ANON_KEY=""
    export SUPABASE_SERVICE_KEY=""
fi

echo
echo -e "${CYAN}⚙️ Advanced Configuration${NC}"

echo -n "Enable analytics? (y/N): "
read -r enable_analytics
if [[ "$enable_analytics" =~ ^[Yy]$ ]]; then
    export ENABLE_ANALYTICS="true"
else
    export ENABLE_ANALYTICS="false"
fi

echo -n "Enable experimental features? (y/N): "
read -r enable_experimental
if [[ "$enable_experimental" =~ ^[Yy]$ ]]; then
    export ENABLE_EXPERIMENTAL="true"
else
    export ENABLE_EXPERIMENTAL="false"
fi

# Generate DATABASE_URL
if [ -n "$SUPABASE_URL" ] && [ -n "$SUPABASE_SERVICE_KEY" ]; then
    # Extract project ID from Supabase URL
    PROJECT_ID=$(echo "$SUPABASE_URL" | grep -oP 'https://\K[^.]+')
    DATABASE_URL="postgresql://postgres.${PROJECT_ID}:[YOUR_PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres"
else
    DATABASE_URL="postgresql://localhost:5432/awe_dev"
fi

echo
echo -e "${YELLOW}📝 Generating environment files...${NC}"

# Generate root .env.local
cat > .env.local << EOF
# AWE Environment Configuration
# Generated by setup-env.sh on $(date -Iseconds)

# Environment
NODE_ENV="$ENVIRONMENT"

# Database
DATABASE_URL="$DATABASE_URL"

# Supabase
SUPABASE_URL="$SUPABASE_URL"
SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY"
SUPABASE_SERVICE_KEY="$SUPABASE_SERVICE_KEY"

# AWE Specific
AWE_SUPABASE_URL="$SUPABASE_URL"
AWE_SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY"
AWE_SUPABASE_SERVICE_KEY="$SUPABASE_SERVICE_KEY"

# Performance
AWE_CACHE_SIZE="1000"
AWE_MAX_CONCURRENCY="10"
AWE_API_TIMEOUT="30000"
AWE_API_RETRIES="3"

# Features
AWE_FEATURES="aiAnalysis,templateGeneration,backgroundSync,vectorSearch"
AWE_OFFLINE_MODE="$([ -z "$SUPABASE_URL" ] && echo "true" || echo "false")"

# Privacy
AWE_TELEMETRY_ENABLED="$ENABLE_ANALYTICS"
AWE_CRASH_REPORTING="$ENABLE_ANALYTICS"

# Development
AWE_DEBUG="$([ "$ENVIRONMENT" = "development" ] && echo "true" || echo "false")"
AWE_LOG_LEVEL="$([ "$ENVIRONMENT" = "development" ] && echo "debug" || echo "info")"
EOF

echo -e "${GREEN}  ✓ Created .env.local${NC}"

# Ensure apps/web directory exists
mkdir -p apps/web

# Generate web app .env.local
cat > apps/web/.env.local << EOF
# AWE Web App Environment Configuration
# Generated by setup-env.sh on $(date -Iseconds)

# Environment
NODE_ENV="$ENVIRONMENT"
NEXT_PUBLIC_APP_URL="$APP_URL"

# Database
DATABASE_URL="$DATABASE_URL"

# Supabase
SUPABASE_URL="$SUPABASE_URL"
SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY"
SUPABASE_SERVICE_KEY="$SUPABASE_SERVICE_KEY"

# Public Environment Variables (exposed to browser)
NEXT_PUBLIC_SUPABASE_URL="$SUPABASE_URL"
NEXT_PUBLIC_SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY"

# Analytics & Monitoring
NEXT_PUBLIC_ENABLE_ANALYTICS="$ENABLE_ANALYTICS"
NEXT_PUBLIC_ENABLE_EXPERIMENTAL_FEATURES="$ENABLE_EXPERIMENTAL"

# Optional: Vercel Analytics (add your ID when available)
# NEXT_PUBLIC_VERCEL_ANALYTICS_ID=""

# Optional: Other monitoring services
# NEXT_PUBLIC_PLAUSIBLE_DOMAIN=""
# NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=""
EOF

echo -e "${GREEN}  ✓ Created apps/web/.env.local${NC}"

echo
echo -e "${GREEN}✅ Environment setup complete!${NC}"
echo
echo -e "${CYAN}Next steps:${NC}"
echo -e "${YELLOW}  1. Run: pnpm db:generate${NC}"
echo -e "${YELLOW}  2. Run: pnpm db:push (if using Supabase)${NC}"
echo -e "${YELLOW}  3. Run: pnpm dev${NC}"
echo -e "${YELLOW}  4. Visit: http://localhost:3000${NC}"
echo

echo -e "${YELLOW}🔒 Security Note:${NC}"
echo -e "${YELLOW}  • .env.local files are gitignored for security${NC}"
echo -e "${YELLOW}  • Never commit environment files to version control${NC}"
echo -e "${YELLOW}  • Use Vercel dashboard for production environment variables${NC}"