#!/usr/bin/env node

/**
 * AWE Environment Setup Script (Simple Version)
 * 
 * No external dependencies - uses only Node.js built-ins
 * Creates .env.local files with basic prompts
 */

const { writeFileSync, mkdirSync, existsSync } = require('fs')
const { join } = require('path')
const { createInterface } = require('readline')

// Simple console colors
const colors = {
  cyan: '\x1b[36m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
}

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

const rl = createInterface({
  input: process.stdin,
  output: process.stdout
})

function question(prompt, defaultValue = '') {
  return new Promise((resolve) => {
    const displayPrompt = defaultValue 
      ? `${prompt} [${defaultValue}]: `
      : `${prompt}: `
    
    rl.question(displayPrompt, (answer) => {
      resolve(answer.trim() || defaultValue)
    })
  })
}

function hiddenQuestion(prompt) {
  return new Promise((resolve) => {
    const stdin = process.stdin
    const stdout = process.stdout
    
    stdout.write(`${prompt}: `)
    stdin.setRawMode(true)
    stdin.resume()
    stdin.setEncoding('utf8')
    
    let input = ''
    
    const onData = (char) => {
      switch (char) {
        case '\n':
        case '\r':
        case '\u0004': // Ctrl+D
          stdin.setRawMode(false)
          stdin.pause()
          stdin.removeListener('data', onData)
          stdout.write('\n')
          resolve(input)
          break
        case '\u0003': // Ctrl+C
          process.exit()
          break
        case '\u007f': // Backspace
          if (input.length > 0) {
            input = input.slice(0, -1)
            stdout.write('\b \b')
          }
          break
        default:
          input += char
          stdout.write('*')
          break
      }
    }
    
    stdin.on('data', onData)
  })
}

async function confirmAction(prompt, defaultValue = false) {
  const answer = await question(`${prompt} (y/N)`, defaultValue ? 'y' : 'n')
  return answer.toLowerCase().startsWith('y')
}

async function main() {
  log('üîß AWE Environment Setup (Simple Version)\n', 'cyan')
  log('This script will help you configure environment variables for AWE development.\n', 'yellow')

  try {
    // Check if .env.local already exists
    const envPath = join(process.cwd(), '.env.local')
    const webEnvPath = join(process.cwd(), 'apps', 'web', '.env.local')
    
    if (existsSync(envPath) || existsSync(webEnvPath)) {
      const overwrite = await confirmAction('.env.local files already exist. Overwrite them?')
      if (!overwrite) {
        log('Setup cancelled. Existing files preserved.', 'yellow')
        rl.close()
        return
      }
    }

    log('üìã Please provide the following information:\n', 'cyan')

    // Gather configuration
    const environment = await question('Environment type', 'development')
    const appUrl = await question('Application URL', 'http://localhost:3000')
    
    log('\nüîó Supabase Configuration', 'cyan')
    log('Get these from: https://app.supabase.com/project/_/settings/api\n', 'yellow')
    
    const useSupabase = await confirmAction('Do you want to configure Supabase?', true)
    
    let supabaseUrl = ''
    let supabaseAnonKey = ''
    let supabaseServiceKey = ''
    
    if (useSupabase) {
      supabaseUrl = await question('Supabase Project URL')
      supabaseAnonKey = await hiddenQuestion('Supabase Anonymous Key')
      
      const hasServiceKey = await confirmAction('Do you have a Service Role Key?', true)
      if (hasServiceKey) {
        supabaseServiceKey = await hiddenQuestion('Supabase Service Role Key')
      }
    }
    
    log('\n‚öôÔ∏è Advanced Configuration', 'cyan')
    const enableAnalytics = await confirmAction('Enable analytics?', environment === 'production')
    const enableExperimental = await confirmAction('Enable experimental features?', environment === 'development')

    // Generate DATABASE_URL
    let databaseUrl = 'postgresql://localhost:5432/awe_dev'
    if (supabaseUrl && supabaseServiceKey) {
      const projectId = supabaseUrl.match(/https:\/\/([^.]+)\.supabase\.co/)?.[1]
      if (projectId) {
        databaseUrl = `postgresql://postgres.${projectId}:[YOUR_PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres`
      }
    }

    log('\nüìù Generating environment files...', 'yellow')

    // Generate environment file content
    const timestamp = new Date().toISOString()
    const offlineMode = !supabaseUrl
    const isDebug = environment === 'development'
    const logLevel = environment === 'development' ? 'debug' : 'info'

    // Root .env.local content
    const rootEnvContent = `# AWE Environment Configuration
# Generated by setup-env-simple.js on ${timestamp}

# Environment
NODE_ENV="${environment}"

# Database
DATABASE_URL="${databaseUrl}"

# Supabase
SUPABASE_URL="${supabaseUrl}"
SUPABASE_ANON_KEY="${supabaseAnonKey}"
SUPABASE_SERVICE_KEY="${supabaseServiceKey}"

# AWE Specific
AWE_SUPABASE_URL="${supabaseUrl}"
AWE_SUPABASE_ANON_KEY="${supabaseAnonKey}"
AWE_SUPABASE_SERVICE_KEY="${supabaseServiceKey}"

# Performance
AWE_CACHE_SIZE="1000"
AWE_MAX_CONCURRENCY="10"
AWE_API_TIMEOUT="30000"
AWE_API_RETRIES="3"

# Features
AWE_FEATURES="aiAnalysis,templateGeneration,backgroundSync,vectorSearch"
AWE_OFFLINE_MODE="${offlineMode}"

# Privacy
AWE_TELEMETRY_ENABLED="${enableAnalytics}"
AWE_CRASH_REPORTING="${enableAnalytics}"

# Development
AWE_DEBUG="${isDebug}"
AWE_LOG_LEVEL="${logLevel}"
`

    // Web app .env.local content
    const webEnvContent = `# AWE Web App Environment Configuration
# Generated by setup-env-simple.js on ${timestamp}

# Environment
NODE_ENV="${environment}"
NEXT_PUBLIC_APP_URL="${appUrl}"

# Database
DATABASE_URL="${databaseUrl}"

# Supabase
SUPABASE_URL="${supabaseUrl}"
SUPABASE_ANON_KEY="${supabaseAnonKey}"
SUPABASE_SERVICE_KEY="${supabaseServiceKey}"

# Public Environment Variables (exposed to browser)
NEXT_PUBLIC_SUPABASE_URL="${supabaseUrl}"
NEXT_PUBLIC_SUPABASE_ANON_KEY="${supabaseAnonKey}"

# Analytics & Monitoring
NEXT_PUBLIC_ENABLE_ANALYTICS="${enableAnalytics}"
NEXT_PUBLIC_ENABLE_EXPERIMENTAL_FEATURES="${enableExperimental}"

# Optional: Vercel Analytics (add your ID when available)
# NEXT_PUBLIC_VERCEL_ANALYTICS_ID=""

# Optional: Other monitoring services
# NEXT_PUBLIC_PLAUSIBLE_DOMAIN=""
# NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=""
`

    // Write files
    writeFileSync(join(process.cwd(), '.env.local'), rootEnvContent)
    log('  ‚úì Created .env.local', 'green')

    // Ensure apps/web directory exists
    const webDir = join(process.cwd(), 'apps', 'web')
    if (!existsSync(webDir)) {
      mkdirSync(webDir, { recursive: true })
    }
    
    writeFileSync(join(webDir, '.env.local'), webEnvContent)
    log('  ‚úì Created apps/web/.env.local', 'green')

    log('\n‚úÖ Environment setup complete!\n', 'green')
    log('Next steps:', 'cyan')
    log('  1. Run: pnpm db:generate', 'yellow')
    log('  2. Run: pnpm db:push (if using Supabase)', 'yellow')
    log('  3. Run: pnpm dev', 'yellow')
    log('  4. Visit: http://localhost:3000\n', 'yellow')

    log('üîí Security Note:', 'yellow')
    log('  ‚Ä¢ .env.local files are gitignored for security', 'yellow')
    log('  ‚Ä¢ Never commit environment files to version control', 'yellow')
    log('  ‚Ä¢ Use Vercel dashboard for production environment variables', 'yellow')

  } catch (error) {
    log(`Setup failed: ${error.message}`, 'red')
    process.exit(1)
  } finally {
    rl.close()
  }
}

if (require.main === module) {
  main()
}

module.exports = { main }