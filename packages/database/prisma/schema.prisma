generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model for storing Clerk user data
model User {
  id                   String   @id @default(cuid())
  clerkId              String   @unique // Clerk user ID
  email                String   
  firstName            String?
  lastName             String?
  role                 String   @default("user") // admin, moderator, developer, user
  tier                 String   @default("free") // free, premium, enterprise
  onboardingCompleted  Boolean  @default(false)
  lastSignIn           DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  projects             Project[] @relation("UserProjects")
  knowledgeSources     KnowledgeSource[] @relation("UserKnowledgeSources")
  patternReviews       PatternReview[] @relation("UserPatternReviews")
  patternUsage         PatternUsage[] @relation("UserPatternUsage")
  organizationMemberships OrganizationMember[]
  
  @@index([clerkId])
  @@index([email])
  @@index([role])
  @@map("users")
}

// Organization support
model Organization {
  id          String   @id @default(cuid())
  clerkOrgId  String   @unique // Clerk organization ID
  name        String
  slug        String   @unique
  plan        String   @default("free")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  members     OrganizationMember[]
  
  @@index([clerkOrgId])
  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String       @default("member") // admin, member
  joinedAt       DateTime     @default(now())
  
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@map("organization_members")
}

model Project {
  id                   String                @id @default(cuid())
  userId               String                // Owner of the project
  name                 String
  description          String?
  path                 String                
  type                 String
  languages            String[]
  frameworks           String[]
  fileCount            Int
  codeComplexity       Float
  maintainabilityScore Float
  testCoverage         Float?
  bundleSize           Int?
  loadTime             Int?
  lighthouse           Int?
  hasClaudeMd          Boolean               @default(false)
  hasMemoryFile        Boolean               @default(false)
  optimizationLevel    Float                 @default(0)
  isDefault            Boolean               @default(false) // Default project for user
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  
  // Relations
  user                 User                  @relation("UserProjects", fields: [userId], references: [clerkId], onDelete: Cascade)
  configuration        ProjectConfiguration?
  dependencies         ProjectDependency[]
  templates            ProjectTemplate[]
  recommendations      Recommendation[]
  patternUsage         PatternUsage[]        // Track pattern usage per project
  telemetryEvents      TelemetryEvent[]      // Project-specific events

  @@unique([userId, name])
  @@index([userId])
  @@map("projects")
}

model ProjectDependency {
  id        String  @id @default(cuid())
  projectId String
  name      String
  version   String
  type      String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@map("project_dependencies")
}

model Template {
  id           String            @id @default(cuid())
  name         String            @unique
  description  String
  category     String
  tags         String[]
  type         String
  framework    String?
  language     String
  files        Json
  metadata     Json
  requirements Json?
  usageCount   Int               @default(0)
  rating       Float?            @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  projects     ProjectTemplate[]

  @@map("templates")
}

model ProjectTemplate {
  id         String   @id @default(cuid())
  projectId  String
  templateId String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([projectId, templateId])
  @@map("project_templates")
}

model Recommendation {
  id          String    @id @default(cuid())
  projectId   String
  type        String
  priority    String
  title       String
  description String
  effort      String
  impact      String
  status      String    @default("pending")
  appliedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model AnalysisCache {
  id        String   @id @default(cuid())
  key       String   @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
  @@map("analysis_cache")
}

model UserConfig {
  id        String   @id @default(cuid())
  userId    String   @unique
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_configs")
}

model TelemetryEvent {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  projectId String?
  data      Json?
  createdAt DateTime @default(now())
  
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([event])
  @@index([userId])
  @@index([projectId])
  @@index([createdAt])
  @@map("telemetry_events")
}

model KnowledgePattern {
  id             String                 @id @default(cuid())
  type           String
  category       String
  name           String
  description    String
  pattern        Json
  confidence     Float
  source         String
  sourceUrl      String?
  framework      String?
  version        String?
  verified       Boolean                @default(false)
  votes          Int                    @default(0)
  usageCount     Int                    @default(0)
  deprecated     Boolean                @default(false)
  lastVerified   DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  practices      BestPractice[]
  configurations ProjectConfiguration[]

  @@index([type, category])
  @@index([framework, version])
  @@index([confidence])
  @@map("knowledge_patterns")
}

model BestPractice {
  id           String            @id @default(cuid())
  title        String
  description  String
  category     String
  explanation  String
  codeExample  String?
  antiPattern  String?
  framework    String?
  language     String?
  projectType  String?
  confidence   Float             @default(0.5)
  sourceUrl    String?
  verified     Boolean           @default(false)
  votes        Int               @default(0)
  deprecated   Boolean           @default(false)
  supersededBy String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  patternId    String?
  pattern      KnowledgePattern? @relation(fields: [patternId], references: [id])

  @@index([category, framework])
  @@index([confidence])
  @@map("best_practices")
}

model ProjectConfiguration {
  id            String            @id @default(cuid())
  projectId     String            @unique
  claudeConfig  Json
  hooks         Json
  slashCommands Json
  mcpServers    Json
  agents        Json
  generatedBy   String
  confidence    Float             @default(0.8)
  validated     Boolean           @default(false)
  rating        Float?
  generatedAt   DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  patternId     String?
  pattern       KnowledgePattern? @relation(fields: [patternId], references: [id])
  project       Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_configurations")
}

model KnowledgeSource {
  id           String            @id @default(cuid())
  userId       String?           // Admin who created it (optional for system sources)
  name         String            
  type         String
  url          String
  scrapeConfig Json
  frequency    String
  lastScraped  DateTime?
  active       Boolean           @default(true)
  reliability  Float             @default(0.8)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  updates      KnowledgeUpdate[]
  patterns     ExtractedPattern[]
  
  user         User?             @relation("UserKnowledgeSources", fields: [userId], references: [clerkId], onDelete: SetNull)

  @@unique([name])
  @@index([userId])
  @@map("knowledge_sources")
}

model KnowledgeUpdate {
  id             String          @id @default(cuid())
  sourceId       String
  content        Json
  changes        Json?
  processed      Boolean         @default(false)
  patternsFound  Int             @default(0)
  practicesFound Int             @default(0)
  scrapedAt      DateTime        @default(now())
  processedAt    DateTime?
  source         KnowledgeSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([sourceId, scrapedAt])
  @@map("knowledge_updates")
}

model Hook {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  category     String
  trigger      String
  script       String
  config       Json?
  frameworks   String[]
  projectTypes String[]
  tested       Boolean  @default(false)
  rating       Float?
  usageCount   Int      @default(0)
  author       String?
  version      String   @default("1.0.0")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([category])
  @@map("hooks")
}

model Agent {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  type         String
  config       Json
  capabilities Json
  requirements Json?
  successRate  Float?
  avgDuration  Int?
  usageCount   Int      @default(0)
  version      String   @default("1.0.0")
  author       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([type])
  @@map("agents")
}

// ============================================
// Pattern Management System
// ============================================

enum PatternStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REFINEMENT
}

enum ReviewAction {
  APPROVE
  REJECT
  REFINE
  REQUEST_INFO
}

enum PatternCategory {
  API_CHANGE
  BEST_PRACTICE
  WARNING
  EXAMPLE
  CONCEPT
  PERFORMANCE
  SECURITY
  DEPRECATION
  BREAKING_CHANGE
  OTHER
}

// Pattern extracted from knowledge sources (global resource)
model ExtractedPattern {
  id          String          @id @default(cuid())
  sourceId    String
  updateId    String?         // Reference to specific KnowledgeUpdate
  pattern     String          @db.Text
  description String?         @db.Text
  category    PatternCategory
  confidence  Float           @default(0.5)
  relevance   Float           @default(0.5)
  metadata    Json?           // Examples, tags, additional info
  status      PatternStatus   @default(PENDING)
  extractedBy String?         // Admin ID who triggered extraction (optional for system)
  extractedAt DateTime        @default(now())
  approvedAt  DateTime?
  approvedBy  String?         // Admin ID who approved
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  source      KnowledgeSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  reviews     PatternReview[]
  usage       PatternUsage[]
  
  @@index([sourceId, status])
  @@index([category, status])
  @@index([extractedAt])
  @@map("extracted_patterns")
}

// Review actions for patterns
model PatternReview {
  id         String       @id @default(cuid())
  patternId  String
  userId     String
  action     ReviewAction
  feedback   String?      @db.Text
  metadata   Json?        // Additional review data
  createdAt  DateTime     @default(now())
  
  user       User             @relation("UserPatternReviews", fields: [userId], references: [clerkId], onDelete: Cascade)
  pattern    ExtractedPattern @relation(fields: [patternId], references: [id], onDelete: Cascade)
  
  @@index([patternId])
  @@index([userId])
  @@map("pattern_reviews")
}

// Pattern processing queue
model PatternQueue {
  id            String   @id @default(cuid())
  sourceId      String?
  updateId      String?
  content       Json     // Content to extract patterns from
  priority      Int      @default(0)
  attempts      Int      @default(0)
  maxAttempts   Int      @default(3)
  status        String   @default("pending") // pending, processing, completed, failed
  error         String?  @db.Text
  processedAt   DateTime?
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([status, priority])
  @@index([sourceId])
  @@map("pattern_queue")
}

// Pattern usage tracking
model PatternUsage {
  id            String   @id @default(cuid())
  patternId     String
  userId        String?
  projectId     String?
  action        String   // viewed, applied, exported, shared
  context       Json?    // Additional context about usage
  sessionId     String?  // Track usage within a session
  createdAt     DateTime @default(now())
  
  user          User?            @relation("UserPatternUsage", fields: [userId], references: [clerkId], onDelete: Cascade)
  pattern       ExtractedPattern @relation(fields: [patternId], references: [id], onDelete: Cascade)
  project       Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([patternId])
  @@index([userId])
  @@index([projectId])
  @@index([action])
  @@index([createdAt])
  @@map("pattern_usage")
}


// ============================================
// RESOURCE HUB - Full System
// ============================================

enum ResourceType {
  PATTERN
  SNIPPET
  HOOK
  AGENT
  TEMPLATE
  GUIDE
  TOOL
  CONFIG
  WORKFLOW
  INTEGRATION
}

enum ResourceStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DEPRECATED
}

enum ResourceVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum TagType {
  USER
  AI
  SYSTEM
}

model Resource {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  title       String?  // Backwards compatibility
  description String   @db.Text
  
  // Content storage - supports different formats
  content     Json     // ResourceContent structure
  rawContent  String?  @db.Text  // Original file content if different
  fileType    String   @default("markdown") // markdown, json, yaml, js, ts, etc.
  
  // Resource categorization
  type        ResourceType
  status      ResourceStatus    @default(PUBLISHED)
  visibility  ResourceVisibility @default(PUBLIC)
  
  // Relations
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  authorId    String?  // User who created it
  workspaceId String?  // Workspace context
  projectId   String?  // Project context
  
  // Flexible tagging system
  tags        ResourceTag[]
  keywords    String[] // Auto-extracted keywords
  
  // Collections
  collections CollectionResource[]
  
  // Reviews and feedback
  reviews     ResourceReview[]
  usage       ResourceUsage[]
  
  // Metadata
  author      String   @default("community")
  authorGithub String?
  version     String?
  sourceUrl   String?
  sourceRepo  String?  // GitHub repo if applicable
  sourceId    String?  // Link to KnowledgeSource
  license     String?
  changelog   String?  @db.Text
  
  // Usage metrics
  usageCount  Int      @default(0)
  downloads   Int      @default(0)
  views       Int      @default(0)
  stars       Int      @default(0)
  rating      Float?   // Average rating from reviews
  
  // Quality indicators
  quality     Float    @default(0.5)
  verified    Boolean  @default(false)
  official    Boolean  @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  // JSON metadata for flexibility
  metadata    Json?    // Store any additional data
  
  @@index([type])
  @@index([status])
  @@index([visibility])
  @@index([categoryId])
  @@index([authorId])
  @@index([workspaceId])
  @@index([projectId])
  @@index([quality])
  @@index([rating])
  @@index([verified])
  @@index([createdAt])
  @@map("resources")
}

model Category {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  icon        String?
  color       String?
  parentId    String?
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryHierarchy")
  order       Int         @default(0)
  isActive    Boolean     @default(true)
  metadata    Json?
  resources   Resource[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([parentId])
  @@index([slug])
  @@map("categories")
}

model Tag {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  category    String?       // Tag category/group
  icon        String?
  color       String?
  usageCount  Int           @default(0)
  isOfficial  Boolean       @default(false)
  metadata    Json?
  resources   ResourceTag[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([category])
  @@index([slug])
  @@map("tags")
}

model ResourceTag {
  id          String   @id @default(cuid())
  resourceId  String
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tagId       String
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagType     TagType  @default(USER)
  confidence  Float?   // For AI-generated tags
  addedBy     String?  // User who added the tag
  createdAt   DateTime @default(now())
  
  @@unique([resourceId, tagId])
  @@index([resourceId])
  @@index([tagId])
  @@index([tagType])
  @@map("resource_tags")
}

model Collection {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  description String
  isOfficial  Boolean              @default(false)
  isCurated   Boolean              @default(false)
  resources   CollectionResource[]
  author      String?
  metadata    Json?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  @@index([slug])
  @@map("collections")
}

model CollectionResource {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  resourceId   String
  resource     Resource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  order        Int        @default(0)
  notes        String?    // Curator notes about why this resource is in the collection
  addedAt      DateTime   @default(now())
  
  @@unique([collectionId, resourceId])
  @@index([collectionId])
  @@index([resourceId])
  @@map("collection_resources")
}

model ResourceReview {
  id          String   @id @default(cuid())
  resourceId  String
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  userId      String
  rating      Float    // 1-5 stars
  comment     String?  @db.Text
  helpful     Int      @default(0) // Number of people who found this helpful
  verified    Boolean  @default(false) // Verified purchase/usage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([resourceId])
  @@index([userId])
  @@index([rating])
  @@map("resource_reviews")
}

model ResourceUsage {
  id          String   @id @default(cuid())
  resourceId  String
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  userId      String?
  projectId   String?
  action      String   // viewed, downloaded, applied, starred, shared
  context     Json?    // Additional context about usage
  sessionId   String?  // Track usage within a session
  createdAt   DateTime @default(now())
  
  @@index([resourceId])
  @@index([userId])
  @@index([projectId])
  @@index([action])
  @@index([createdAt])
  @@map("resource_usage")
}
