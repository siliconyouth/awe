generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Project {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  path                 String                @unique
  type                 String
  languages            String[]
  frameworks           String[]
  fileCount            Int
  codeComplexity       Float
  maintainabilityScore Float
  testCoverage         Float?
  bundleSize           Int?
  loadTime             Int?
  lighthouse           Int?
  hasClaudeMd          Boolean               @default(false)
  hasMemoryFile        Boolean               @default(false)
  optimizationLevel    Float                 @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  configuration        ProjectConfiguration?
  dependencies         ProjectDependency[]
  templates            ProjectTemplate[]
  recommendations      Recommendation[]

  @@map("projects")
}

model ProjectDependency {
  id        String  @id @default(cuid())
  projectId String
  name      String
  version   String
  type      String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@map("project_dependencies")
}

model Template {
  id           String            @id @default(cuid())
  name         String            @unique
  description  String
  category     String
  tags         String[]
  type         String
  framework    String?
  language     String
  files        Json
  metadata     Json
  requirements Json?
  usageCount   Int               @default(0)
  rating       Float?            @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  projects     ProjectTemplate[]

  @@map("templates")
}

model ProjectTemplate {
  id         String   @id @default(cuid())
  projectId  String
  templateId String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([projectId, templateId])
  @@map("project_templates")
}

model Recommendation {
  id          String    @id @default(cuid())
  projectId   String
  type        String
  priority    String
  title       String
  description String
  effort      String
  impact      String
  status      String    @default("pending")
  appliedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model AnalysisCache {
  id        String   @id @default(cuid())
  key       String   @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
  @@map("analysis_cache")
}

model UserConfig {
  id        String   @id @default(cuid())
  userId    String   @unique
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_configs")
}

model TelemetryEvent {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  projectId String?
  data      Json?
  createdAt DateTime @default(now())

  @@index([event])
  @@index([userId])
  @@index([createdAt])
  @@map("telemetry_events")
}

model KnowledgePattern {
  id             String                 @id @default(cuid())
  type           String
  category       String
  name           String
  description    String
  pattern        Json
  confidence     Float
  source         String
  sourceUrl      String?
  framework      String?
  version        String?
  verified       Boolean                @default(false)
  votes          Int                    @default(0)
  usageCount     Int                    @default(0)
  deprecated     Boolean                @default(false)
  lastVerified   DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  practices      BestPractice[]
  configurations ProjectConfiguration[]

  @@index([type, category])
  @@index([framework, version])
  @@index([confidence])
  @@map("knowledge_patterns")
}

model BestPractice {
  id           String            @id @default(cuid())
  title        String
  description  String
  category     String
  explanation  String
  codeExample  String?
  antiPattern  String?
  framework    String?
  language     String?
  projectType  String?
  confidence   Float             @default(0.5)
  sourceUrl    String?
  verified     Boolean           @default(false)
  votes        Int               @default(0)
  deprecated   Boolean           @default(false)
  supersededBy String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  patternId    String?
  pattern      KnowledgePattern? @relation(fields: [patternId], references: [id])

  @@index([category, framework])
  @@index([confidence])
  @@map("best_practices")
}

model ProjectConfiguration {
  id            String            @id @default(cuid())
  projectId     String            @unique
  claudeConfig  Json
  hooks         Json
  slashCommands Json
  mcpServers    Json
  agents        Json
  generatedBy   String
  confidence    Float             @default(0.8)
  validated     Boolean           @default(false)
  rating        Float?
  generatedAt   DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  patternId     String?
  pattern       KnowledgePattern? @relation(fields: [patternId], references: [id])
  project       Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_configurations")
}

model KnowledgeSource {
  id           String            @id @default(cuid())
  name         String            @unique
  type         String
  url          String
  scrapeConfig Json
  frequency    String
  lastScraped  DateTime?
  active       Boolean           @default(true)
  reliability  Float             @default(0.8)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  updates      KnowledgeUpdate[]

  @@map("knowledge_sources")
}

model KnowledgeUpdate {
  id             String          @id @default(cuid())
  sourceId       String
  content        Json
  changes        Json?
  processed      Boolean         @default(false)
  patternsFound  Int             @default(0)
  practicesFound Int             @default(0)
  scrapedAt      DateTime        @default(now())
  processedAt    DateTime?
  source         KnowledgeSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([sourceId, scrapedAt])
  @@map("knowledge_updates")
}

model Hook {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  category     String
  trigger      String
  script       String
  config       Json?
  frameworks   String[]
  projectTypes String[]
  tested       Boolean  @default(false)
  rating       Float?
  usageCount   Int      @default(0)
  author       String?
  version      String   @default("1.0.0")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([category])
  @@map("hooks")
}

model Agent {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  type         String
  config       Json
  capabilities Json
  requirements Json?
  successRate  Float?
  avgDuration  Int?
  usageCount   Int      @default(0)
  version      String   @default("1.0.0")
  author       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([type])
  @@map("agents")
}
